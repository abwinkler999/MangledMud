Links
=====

http://ruby-doc.org/docs/ProgrammingRuby/html/ext_ruby.html

Getting Environment up and running [clean ubuntu]
==================================

Default ubuntu had gcc etc. but ruby.h seems to have gone walkies. It was at: /usr/lib/ruby/1.8/i486-linux

sudo apt-get install ruby1.8-dev

F*cking brilliant, faulty tree! This machine is getting beyond broken!
> sudo rm /var/cache/apt/*.bin !!!

Double F*cking brilliant - The machine crashed again, mid-way!!!

Doing a make seemed to work, ruby test.rb - no ruby gems...

> sudo apt-get install rubygems
> sudo gem install rubygems-update
> sudo (/var/lib/gems/1.8/bin/!!!)update_rubygems

Had a line, but add into .bashrc: export PATH=$PATH:/var/lib/gems/1.8/bin

Now need mocha

> sudo gem install mocha (again I find the sudo/non-sudo gem stuff a mystery)

> ruby test.rb (now passed)

Will also need git installed (for accessing content)

Notes
=====


Will try out SWIG

For each .c file, copy it into the ruby folder and get it interfacing to ruby. The only aspects that will take some careful attention are those related to networking, I think most functions are in interface.c

My suggestion is to stub out these - They only send or receive and if you look at how this occurs you might want to change the logic to passing in function pointers? So you can mock? You will need to experiment a little.

The idea is to get each file working with ruby and tested, then to switch to a pure ruby implementation and get it passing the tests. Once this is done move on. As said the main issue is methods calling on, I suspect there aren't many in this category. Where there are you will need to mock (its ok if methods call within a single .c file) - Until you have implemented all the methods at which point you can un-mock. I.e. define the method as doing nowt, then mock it in ruby! Need to take careful notes for "todo" related to each file.

As said I recommend you pick a small file first to play with - utils.c (?) actually you will need a database so db.c might be the best? Then possibly methods which add the player, the room etc. finally methods related to moving about? I.e. build up from the basics.

!!! Run on ruby 1.9.x ??? I really should at least test it at the end and see the differences. I doubt I will write any incompatible code, but its worth the test.

!!! Sort out Makefile's etc. once a pattern emerges !!!

Set gcc to high warning level

!!! Config.h defines some things which I will need as constants in ruby ? !!!

!!! Single place for record helper

!!! Suspect I'm leaking memory when I convert ruby to c strings

!!! Ensure success/failure strings set in test (when I tidy them again!)

!!! Consider restricted builder option, it might make things simpler. Again possibly do this on the pure ruby version?

!!! Need to document what each part of db object does e.g. exit location is where it goes to, person exits is home (create.c is informative in this regard). This should be on the blog and in general help with the ruby port

!!! Suggest a standard test db set-up, I seem to use the same for most of the tests - Ideally an object, so I can access things by name, think about

!!! Once I can send in commands I should be able to run a number of high level test actions and record their output. This should be used for regression tests. I should probably ping Anthony on this as I know he has worked with this and ruby. I could write my own. Essentialy I want to have a set of commands (in a text file), these are read in by a small routine which passes them on to the command handler. Output (from notify) is then saved to disk (temp file). Once completed the tmp file is compared to the cannonical file (diff). This should probably be driven from a makefile e.g. .ok file generated by .txt file? I'm sure anthony will have something about to help...

!!! Initially the ruby port will stay faithful to the original code to the point where order of events are maintained. Once I'm happy the new code is functioning I will start refactoring it to be more ruby like, at this point in time tests may break wrt when messages are sent, e.g. player a gets message after player b. I also wish to experiment with cucumber as I think it will allow some high level assertions to be made. E.g. "When a player speaks in an empty room nobody hears them". For now I will rely on regression tests.

!!! A future hope is to refactor the "database" to actually be one. This will remove memory burden. Given the code uses indexes (akin to db ID's) it may be relatively simple to switch.

!!! Considering putting this behind a web-server. I don't want to have to write a terminal emulator! Chat window on ruby, hunt about. Possibly XMPP? It might be possible for the mud to be an XMPP client, i.e. people send it messages and it responds but also pings others :-) This sounds neat. This might help: http://www.stevegibson.com/blog/ I still have a way to go before I reach this though :-)

!!! The source I grabbed is missing some more advanced features e.g. the !lock action (see making stuff). Possibly I should fix this in the ruby code rather than through the C to ruby root.

Files I *suspect* I do not need to Convert
==========================================

paths.c
dump.c
extract.c
sanity-check.c

Files to Convert
================

4. interface.c [most of this is networking which I will switch to ruby for, some might be needed - pulled out]

Files Being Converted
=====================

2. game.c [probably only process command needed]

Files under Test (done)
=======================

1. db.c
2. match.c
3. player.c
4. predicates.c
5. speech.c
6. utils.c
7. move.c
8. look.c
9. create.c [this I should have done ages ago!]
10. set.c
11. rob.c
12. wiz.c
13. stringutil.c [I doubt it, but I may need to if the routines are atypical]
14. help.c
