Will try out SWIG

For each .c file, copy it into the ruby folder and get it interfacing to ruby. The only aspects that will take some careful attention are those related to networking, I think most functions are in interface.c

My suggestion is to stub out these - They only send or receive and if you look at how this occurs you might want to change the logic to passing in function pointers? So you can mock? You will need to experiment a little.

The idea is to get each file working with ruby and tested, then to switch to a pure ruby implementation and get it passing the tests. Once this is done move on. As said the main issue is methods calling on, I suspect there aren't many in this category. Where there are you will need to mock (its ok if methods call within a single .c file) - Until you have implemented all the methods at which point you can un-mock. I.e. define the method as doing nowt, then mock it in ruby! Need to take careful notes for "todo" related to each file.

As said I recommend you pick a small file first to play with - utils.c (?) actually you will need a database so db.c might be the best? Then possibly methods which add the player, the room etc. finally methods related to moving about? I.e. build up from the basics.

!!! Sort out Makefile's etc. once a pattern emerges !!!

Set gcc to high warning level

!!! Config.h defines some things which I will need as constants in ruby ? !!!

!!! Single place for record helper

!!! Suspect I'm leaking memory when I convert ruby to c strings

!!! Ensure success/failure strings set in test (when I tidy them again!)

!!! Need to document what each part of db object does e.g. exit location is where it goes to, person exits is home (create.c is informative in this regard). This should be on the blog and in general help with the ruby port

!!! Suggest a standard test db set-up, I seem to use the same for most of the tests - Ideally an object, so I can access things by name, think about

!!! Once I can send in commands I should be able to run a number of high level test actions and record their output. This should be used for regression tests. I should probably ping Anthony on this as I know he has worked with this and ruby. I could write my own. Essentialy I want to have a set of commands (in a text file), these are read in by a small routine which passes them on to the command handler. Output (from notify) is then saved to disk (temp file). Once completed the tmp file is compared to the cannonical file (diff). This should probably be driven from a makefile e.g. .ok file generated by .txt file? I'm sure anthony will have something about to help...

Files I *suspect* I do not need to Convert
==========================================

paths.c
dump.c
extract.c
sanity-check.c

Files to Convert
================

3. help.c [possibly, not much in it anyway]
4. interface.c [most of this is networking which I will switch to ruby for, some might be needed - pulled out]

Files Being Converted
=====================

2. game.c [probably only process command needed]

!!! DISABLED do_help and do_news in game.c - FIX ASAP

Files under Test (done)
=======================

1. db.c
2. match.c
3. player.c
4. predicates.c
5. speech.c
6. utils.c
7. move.c
8. look.c
9. create.c [this I should have done ages ago!]
10. set.c
11. rob.c
12. wiz.c
13. stringutil.c [I doubt it, but I may need to if the routines are atypical]
